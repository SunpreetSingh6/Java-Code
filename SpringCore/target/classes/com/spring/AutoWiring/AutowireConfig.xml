<?xml version="1.0" encoding="UTF-8"?>
<beans
xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:p="http://www.springframework.org/schema/p"
xmlns:c="http://www.springframework.org/schema/c"
xmlns:context="http://www.springframework.org/schema/context"
xsi:schemaLocation="http://www.springframework.org/schema/beans  
http://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- Autowiring using XML -->
	
	<bean class="com.spring.AutoWiring.Address" name="address1">
		<property name="street" value="7" />
		<property name="city" value="New Delhi" />
	</bean>
	
	<bean class="com.spring.AutoWiring.Address" name="address">
		<property name="street" value="56" />
		<property name="city" value="Canada" />
	</bean>
	
	<!--    In byName(reference name should match with the bean name.)
			<bean class="com.spring.AutoWiring.Emp" name="e" autowire="byName">
	
			In byType(reference name/bean name might be different , But problem arises when
						we have 2 beans for same class in this situation compiler confuses
						which object to inject. )  
			Both byName and byType will use setter methods.
			
			In constructor(reference name/bean name might be different , but should have a one 
							parameterized constructor for address. In multiple parameterized 
							constructor compiler will not be able to set address.)
	-->
	
	
	<!-- 	Using byName
	
	<bean class="com.spring.AutoWiring.Emp" name="emp" autowire="byName">
		<property name="id" value="401" />		
		<property name="name" value="Sunpreet Singh" />
	</bean>
	
	 -->	
	
	<!-- Using byType
	
	<bean class="com.spring.AutoWiring.Emp" name="emp" autowire="byType">
		<property name="id" value="401" />		
		<property name="name" value="Sunpreet Singh" />
	</bean>
	
	 -->
	
	<!-- By default constructor will go for byName in backend -->
	  
	<bean class="com.spring.AutoWiring.Emp" name="e" autowire="constructor">
		<property name="id" value="401" />
		<property name="name" value="Sunpreet Singh" />
	</bean>
	
		
	<!-- Autowiring using Annotation -->
	
	<bean class="com.spring.AutoWiring.Student" name="s">
		<property name="id" value="501" />
		<property name="name" value="Sunpreet Singh" />
	</bean>
	
	<context:annotation-config />
	
</beans>